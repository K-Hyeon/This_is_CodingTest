def is_installable(x, y, is_beam, beam_board, pillar_board):
    if is_beam:
        return (pillar_board[x][y - 1] or pillar_board[x + 1][y - 1]) or ((x >= 1 and beam_board[x - 1][y]) and beam_board[x + 1][y])
    else:
        return (y == 0) or ((x >= 1 and beam_board[x - 1][y]) or beam_board[x][y]) or pillar_board[x][y - 1]

def install(x, y, is_beam, beam_board, pillar_board, is_install):
    if is_beam:
        beam_board[x][y] = is_install
    else:
        pillar_board[x][y] = is_install

def check_validity(res, beam_board, pillar_board):
    for x, y, is_beam in res:
        if not is_installable(x, y, is_beam, beam_board, pillar_board):
            return False
    return True

def solution(board_sz, insts):
    res = []
    beam_board = [[False] * (board_sz + 1) for _ in range(board_sz + 1)]
    pillar_board = [[False] * (board_sz + 1) for _ in range(board_sz + 1)]
    for x, y, is_beam, is_install in insts:
        if is_install:
            if is_installable(x, y, is_beam, beam_board, pillar_board):
                install(x, y, is_beam, beam_board, pillar_board, is_install)
                res.append([x, y, is_beam])
        else:
            install(x, y, is_beam, beam_board, pillar_board, is_install)
            if check_validity(res, beam_board, pillar_board):
                res.remove([x, y, is_beam])
            else:
                install(x, y, is_beam, beam_board, pillar_board, True)
    return sorted(res)

if __name__ == '__main__':
    a = [
        5,
        5,
        5,
    ]
    b = [
        [[1,0,0,1],[1,1,1,1],[2,1,0,1],[2,2,1,1],[5,0,0,1],[5,1,0,1],[4,2,1,1],[3,2,1,1]],
        [[0,0,0,1],[2,0,0,1],[4,0,0,1],[0,1,1,1],[1,1,1,1],[2,1,1,1],[3,1,1,1],[2,0,0,0],[1,1,1,0],[2,2,0,1]],
        [[0,1,1,1],[5,0,0,1],[4,1,1,1]],
    ]
    for x, y in zip(a, b):
        print(solution(x, y))
